#!/bin/bash
# Platter Setup Script v0.8.0
# Automates initial configuration and setup

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
DEFAULT_ADMIN_USER="admin"
DEFAULT_PORT="8080"
DEFAULT_ENV="development"

# Helper functions
print_header() {
    echo -e "\n${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}\n"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if running from project root
if [ ! -f "Cargo.toml" ]; then
    print_error "Please run this script from the project root directory"
    exit 1
fi

print_header "Platter Setup Wizard v0.8.0"

# Step 1: Create directories
print_header "Step 1: Creating directories"

mkdir -p config data logs data/backups
print_success "Created config/ directory"
print_success "Created data/ directory"
print_success "Created logs/ directory"
print_success "Created data/backups/ directory"

# Step 2: Copy configuration templates
print_header "Step 2: Setting up configuration files"

# Copy validation and settings (always safe to copy)
if [ ! -f "config/validation.toml" ]; then
    print_warning "config/validation.toml not found - this should exist in the repository"
else
    print_success "config/validation.toml already exists"
fi

if [ ! -f "config/settings.toml" ]; then
    print_warning "config/settings.toml not found - this should exist in the repository"
else
    print_success "config/settings.toml already exists"
fi

# Step 3: Setup admin configuration
print_header "Step 3: Admin User Setup"

if [ -f "config/admin.toml" ]; then
    print_warning "config/admin.toml already exists"
    read -p "Overwrite existing admin config? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_success "Keeping existing admin config"
        SKIP_ADMIN=true
    fi
fi

if [ "$SKIP_ADMIN" != "true" ]; then
    # Get admin username
    read -p "Admin username [${DEFAULT_ADMIN_USER}]: " ADMIN_USER
    ADMIN_USER=${ADMIN_USER:-$DEFAULT_ADMIN_USER}
    
    # Generate UUID for admin user
    if command -v uuidgen &> /dev/null; then
        ADMIN_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')
    else
        # Fallback: generate a simple UUID-like string
        ADMIN_ID=$(cat /proc/sys/kernel/random/uuid 2>/dev/null || echo "$(date +%s)-$(shuf -i 1000-9999 -n 1)")
    fi
    
    # Get admin password
    echo "Enter admin password (min 12 characters with uppercase, lowercase, numbers, and special chars):"
    read -s ADMIN_PASSWORD
    echo
    echo "Confirm admin password:"
    read -s ADMIN_PASSWORD_CONFIRM
    echo
    
    if [ "$ADMIN_PASSWORD" != "$ADMIN_PASSWORD_CONFIRM" ]; then
        print_error "Passwords do not match"
        exit 1
    fi
    
    # Validate password strength
    if [ ${#ADMIN_PASSWORD} -lt 12 ]; then
        print_error "Password must be at least 12 characters"
        exit 1
    fi
    
    # Generate password hash using Rust (if available)
    if command -v cargo &> /dev/null; then
        print_success "Generating secure password hash..."
        # This would require a Rust binary - for now, use a placeholder
        ADMIN_PASSWORD_HASH='$argon2id$v=19$m=19456,t=2,p=1$PLACEHOLDER'
        print_warning "Password hash generation requires the application to be built"
        print_warning "You'll need to run: cargo run --bin platter -- admin hash-password"
    else
        ADMIN_PASSWORD_HASH='$argon2id$v=19$m=19456,t=2,p=1$PLACEHOLDER'
    fi
    
    # Create admin.toml
    cat > config/admin.toml <<EOF
# Admin Users Configuration
# Generated by setup script on $(date -u +"%Y-%m-%dT%H:%M:%SZ")
# IMPORTANT: Never commit this file to version control!

[metadata]
schema_version = "1.0.0"
config_name = "Admin Users Configuration"
last_modified = "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

[[admin_users]]
id = "${ADMIN_ID}"
username = "${ADMIN_USER}"
password_hash = "${ADMIN_PASSWORD_HASH}"
created_at = "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
roles = ["super_admin"]
is_active = true

[roles]

[roles.super_admin]
description = "Full system access"
permissions = [
    "manage_users",
    "manage_menu_items",
    "manage_presets",
    "manage_schedules",
    "manage_notices",
    "manage_settings",
    "view_logs",
    "export_data"
]
EOF
    
    print_success "Created config/admin.toml"
    print_warning "Remember to update the password_hash by running:"
    print_warning "  cargo run --bin platter -- admin hash-password"
fi

# Step 4: Setup data files
print_header "Step 4: Setting up data files"

for file in menu_items notices menu_presets menu_schedules; do
    if [ ! -f "data/${file}.json" ]; then
        if [ -f "data/${file}.json.example" ]; then
            cp "data/${file}.json.example" "data/${file}.json"
            print_success "Created data/${file}.json from template"
        else
            # Create minimal JSON structure
            cat > "data/${file}.json" <<EOF
{
  "schema_version": "1.0.0",
  "last_updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "generated_by": "setup-script",
  "metadata": {
    "total_items": 0,
    "data_integrity_check": "passed"
  },
  "items": []
}
EOF
            print_success "Created data/${file}.json with empty structure"
        fi
    else
        print_success "data/${file}.json already exists"
    fi
done

# Step 5: Set file permissions
print_header "Step 5: Setting file permissions"

if [ -f "config/admin.toml" ]; then
    chmod 600 config/admin.toml
    print_success "Set config/admin.toml permissions to 600 (owner read/write only)"
fi

chmod -R 644 data/*.json 2>/dev/null || true
print_success "Set data/*.json permissions to 644 (owner read/write, others read)"

# Step 6: Verify setup
print_header "Step 6: Verification"

# Check if all required files exist
REQUIRED_FILES=(
    "config/validation.toml"
    "config/settings.toml"
    "config/admin.toml"
    "data/menu_items.json"
    "data/notices.json"
    "data/menu_presets.json"
    "data/menu_schedules.json"
)

ALL_GOOD=true
for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        print_success "$file exists"
    else
        print_error "$file missing"
        ALL_GOOD=false
    fi
done

# Step 7: Build the application (optional)
print_header "Step 7: Build Application (Optional)"

read -p "Build the application now? (Y/n): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    print_success "Building application..."
    if cargo build --release; then
        print_success "Application built successfully"
    else
        print_error "Build failed - please check errors above"
        ALL_GOOD=false
    fi
fi

# Final summary
print_header "Setup Complete!"

if [ "$ALL_GOOD" = true ]; then
    echo -e "${GREEN}✓ All setup steps completed successfully!${NC}\n"
    
    echo "Next steps:"
    echo "1. Update admin password hash:"
    echo "   ${BLUE}cargo run --bin platter -- admin hash-password${NC}"
    echo ""
    echo "2. Customize settings in:"
    echo "   ${BLUE}config/settings.toml${NC}"
    echo "   ${BLUE}config/validation.toml${NC}"
    echo ""
    echo "3. Add your menu items to:"
    echo "   ${BLUE}data/menu_items.json${NC}"
    echo ""
    echo "4. Run the application:"
    echo "   ${BLUE}cargo run${NC}"
    echo "   or"
    echo "   ${BLUE}./target/release/platter${NC}"
    echo ""
    echo "Access the application at: ${BLUE}http://localhost:${DEFAULT_PORT}${NC}"
    echo "Admin interface: ${BLUE}http://localhost:${DEFAULT_PORT}/admin${NC}"
    echo ""
    print_warning "IMPORTANT: Never commit config/admin.toml or data/*.json to git!"
else
    echo -e "${RED}✗ Setup completed with errors - please review above${NC}\n"
    exit 1
fi